<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="using:UI.Avalonia.ViewModels"
        mc:Ignorable="d" d:DesignWidth="600" d:DesignHeight="400"
        Width="600" Height="400"
        x:Class="UI.Avalonia.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        
		WindowStartupLocation="CenterScreen"
		CanResize="False"
        ExtendClientAreaToDecorationsHint="True"
        ExtendClientAreaChromeHints="PreferSystemChrome"
        SystemDecorations="Full"
        Topmost="True"
        
		Background="Transparent"
        TransparencyLevelHint="Mica, AcrylicBlur, None"
        
		Icon="/Assets/icon.ico"
        Title="{Binding CurrentPage.PageTitle}"
        
        Loaded="OnLoaded"
        Closing="OnClosing"
        >
        <!--
        Background:
        accent: #0094ff
        Mica Dark: #e0202020
        Mica Light: #d0f3f3f3
         -->

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>
 
    <Panel>
	    <Border IsHitTestVisible="False" Background="{Binding CurrentPage.TintColor}">
		    <Border.IsVisible>
			    <MultiBinding Converter="{x:Static BoolConverters.Or}">
				    <Binding  Path="!CurrentPage.EnableTransparency"/>
				    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Window}" Path="!IsActive"/>
				    <MultiBinding Converter="{x:Static BoolConverters.And}">
					    <Binding Path="!CurrentPage.MicaEnabled"/>
					    <Binding Path="!CurrentPage.AcrylicEnabled"/>
				    </MultiBinding>
			    </MultiBinding>
		    </Border.IsVisible>
	    </Border>
	    <ExperimentalAcrylicBorder IsHitTestVisible="False">
		    <ExperimentalAcrylicBorder.IsVisible>
			    <MultiBinding Converter="{x:Static BoolConverters.And}">
				    <Binding  Path="CurrentPage.EnableTransparency"/>
				    <Binding  Path="!CurrentPage.MicaEnabled"/>
				    <Binding  Path="CurrentPage.AcrylicEnabled"/>
			    </MultiBinding>
		    </ExperimentalAcrylicBorder.IsVisible>
		    <ExperimentalAcrylicBorder.Material>
			    <ExperimentalAcrylicMaterial
				    BackgroundSource="Digger"
				    TintColor="{Binding CurrentPage.TintColor, Converter={StaticResource ColorConverter}}"
				    TintOpacity="{Binding CurrentPage.TintOpacity}"
				    MaterialOpacity="0.5"
				/>
		    </ExperimentalAcrylicBorder.Material>
	    </ExperimentalAcrylicBorder>
	    
	    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4 6 -6 0">
		    <!-- back button -->
		    <Button Width="40" Height="36"
		            Background="Transparent" CornerRadius="4"
		            VerticalAlignment="Top" HorizontalAlignment="Left"
		            HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0"
		            IsVisible="{Binding InSettings}"
		            Command="{Binding ToggleSettingsPageCommand}"
		    >
			    <TextBlock FontFamily="{Binding CurrentPage.SymbolFontFamily}" FontSize="12" RenderOptions.TextRenderingMode="Antialias"
			               Text="{Binding CurrentPage.BackSymbol}"
			               Foreground="{Binding CurrentPage.DimTextColor}"/>
		    </Button>
		    <!-- window title -->
			<TextBlock HorizontalAlignment="Left" VerticalAlignment="Top" Margin="11 11 0 0"
		               FontFamily="{Binding CurrentPage.SmallFontFamily}" FontSize="12" RenderOptions.TextRenderingMode="Antialias"
		               IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=IsExtendedIntoWindowDecorations}"
		               Text="{Binding CurrentPage.PageTitle}"/>
	    </StackPanel>

	    <StackPanel Name="TitleButtons" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 0 138 0">
		    <!-- update button -->
		    <Button Width="46" Height="31"
		            Background="Transparent" CornerRadius="0"
		            HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0"
		            IsVisible="{Binding UpdateInfo, Converter={x:Static ObjectConverters.IsNotNull}}"
		    >
				<TextBlock FontFamily="{Binding CurrentPage.SymbolFontFamily}" FontSize="18" RenderOptions.TextRenderingMode="Antialias"
		                   Text="{Binding CurrentPage.UpdateSymbol}"
		                   Foreground="{Binding UpdateIsPrerelease, Converter={StaticResource UpdateColorConverter}, ConverterParameter={Binding CurrentPage.DimTextColor}}"/>
				<Button.Flyout>
					<Flyout>
						<StackPanel>
							<TextBlock Text="{Binding FormattedUpdateInfoHeader}" TextWrapping="Wrap" Width="400"
							           FontSize="18" Margin="2 2 2 12"
							           />
							<TextBlock Text="{Binding FormattedUpdateInfoBody}" TextWrapping="Wrap" Width="400"
							           Margin="2 0 2 0"/>
							<Button Margin="2 12 2 4"
							        Command="{Binding CurrentPage.OpenUrlCommand}" CommandParameter="{Binding FormattedUpdateInfoUrl}"
							>
								<TextBlock Text="{Binding FormattedUpdateInfoVersion}"/>
							</Button>
						</StackPanel>
					</Flyout>
				</Button.Flyout>
			</Button>
		    <!-- settings button -->
		    <Button Width="46" Height="31"
		            Background="Transparent" CornerRadius="0"
		            HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Padding="0"
		            Command="{Binding ToggleSettingsPageCommand}"
		    >
			    <TextBlock FontFamily="{Binding CurrentPage.SymbolFontFamily}" FontSize="18" RenderOptions.TextRenderingMode="Antialias"
			               Text="{Binding CurrentPage.SettingsSymbol}"
			               Foreground="{Binding CurrentPage.DimTextColor}"/>
			    <Button.IsVisible>
				    <MultiBinding Converter="{x:Static BoolConverters.And}">
					    <Binding Path="CurrentPage.CanEditSettings"/>
					    <Binding Path="!InSettings"/>
				    </MultiBinding>
			    </Button.IsVisible>
			</Button>
	    </StackPanel>

	    <TransitioningContentControl Content="{Binding CurrentPage}"
	                                 PageTransition="{Binding InSettings, Converter={StaticResource PageTransitionConverter}}"/>
	    
    </Panel>
</Window>
